{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Projeto Integrador ADS Fatec \u00b6 Projeto Integrador ADS Fatec - S\u00e3o Jos\u00e9 dos Campos proposto pela empresa Visiona para a identifica\u00e7\u00e3o de talh\u00f5es (unidade m\u00ednima de cultivo de uma propriedade com caracter\u00edsticas em comum). Link Oficial para o projeto Github . Integrantes do Grupo \u00b6 T\u00e1bata Gl\u00f3ria (Scrum Master - SM) Jo\u00e2o de Freitas (Project Owner - PO) Guilherme Gomes (Back end Developer - DEV) Jo\u00e3o Arruda (Front end Developer - DEV) Abner Ern\u00e2ni dos Anjos (Full Stack Developer - DEV) Solu\u00e7\u00e3o \u00b6 Desenvolver um Sistema inteligente para a identifica\u00e7\u00e3o autom\u00e1tica de Talh\u00f5es com uso de Intelig\u00eancia Artificial e processos de classifica\u00e7\u00e3o de imagens e com um projeto Web Gis - Sistema de informa\u00e7\u00e3o Geogr\u00e1fico - contendo uma interface gr\u00e1fica agrad\u00e1vel ao usu\u00e1rio e de f\u00e1cil utiliza\u00e7\u00e3o e intuitiva, com uma \u00e1rea de visualiza\u00e7\u00e3o de imagens do mapa, conforme a regi\u00e3o e o per\u00edodo de tempo selecionados pelo usu\u00e1rio, permitindo a manipula\u00e7\u00e3o da imagem (aumentar ou diminuir e demarca\u00e7\u00e3o) e permitir o download desse arquivo para armazenamento. Implementa\u00e7\u00e3o \u00b6 Como implementar? Tecnologias. Plataformas. Ferramentas. Para a implementa\u00e7\u00e3o ser\u00e1 necess\u00e1rio a utiliza\u00e7\u00e3o das seguintes tecnologias: Landsat-8 API: sat\u00e9lite de observa\u00e7\u00e3o da Terra, esses dados das imagens podem ser usados facilmente com qualquer software que reconhe\u00e7a arquivos GeoTIFF atrav\u00e9s de um arquivo CSV de \u00edndice dos dados do Landsat. Sentinel-2 API: constela\u00e7\u00e3o de dois sat\u00e9lites de observa\u00e7\u00e3o da Terra SEUS Os dados s\u00e3o ideais para aplicativos de agricultura, silvicultura e outros tipos de administra\u00e7\u00e3o de terra. esse conjunto de dados est\u00e1 dispon\u00edvel gratuitamente no programa Google Public Cloud Data. Geo Server: servidor de c\u00f3digo aberto escrito em Java que permite aos usu\u00e1rios compartilhar, processar e editar dados geoespaciais. Projetado para interoperabilidade, publica dados de qualquer fonte de dados espaciais importantes usando padr\u00f5es abertos. PostgreSQL: sistema de gerenciamento de banco de dados objeto-relacional (SGBDOR) baseado no POSTGRES Vers\u00e3o 4.2. Spring Boot: facilitar o processo de configura\u00e7\u00e3o e publica\u00e7\u00e3o de aplica\u00e7\u00f5es. Pode-se escolher os m\u00f3dulos que precisa atrav\u00e9s dos starters que inclui no pom.xml do projeto. Basicamente, s\u00e3o depend\u00eancias que agrupam outras depend\u00eancias. Angular: estrutura de design de aplicativo e plataforma de desenvolvimento para criar aplicativos de p\u00e1gina \u00fanica eficientes e sofisticados. Java: linguagem de programa\u00e7\u00e3o orientada a objetos que \u00e9 amplamente usada para o desenvolvimento de sites e aplicativos. Permite o desenvolvimento de programas multiplataforma, que podem ser executados em qualquer dispositivo. Python: linguagem de programa\u00e7\u00e3o de alto n\u00edvel, interpretada, de script, imperativa, orientada a objetos, funcional, de tipagem din\u00e2mica e forte, para a implementa\u00e7\u00e3o da inteligencia artificial. Conda Environment: gerenciador de ambientes virtuais para a linguagem python. Mkdocs: gerador de documenta\u00e7\u00e3o baseado na linguagem python. Github: Sistema de controle de vers\u00e3o distribuido e gerenciamento de c\u00f3digo-fonte, fornece controle de acesso e v\u00e1rios recursos de colabora\u00e7\u00e3o, como rastreamento de erros, solicita\u00e7\u00f5es de recursos, gerenciamento de tarefas e wikis para cada projeto. Microsoft TEAM: Trata-se de um aplicativo de bate-papo em grupo que permite o gerenciamento de diversas conversas em um \u00fanico ambiente de controle. Foi desenvolvido para facilitar a comunica\u00e7\u00e3o e promover a colabora\u00e7\u00e3o entre as equipes da empresa/projeto. Componentes \u00b6 Sistema Inteligente - constru\u00e7\u00e3o da base de dados a ser consumida; API - interm\u00e9dio para a base de dados e o sistema Web GIS; Sistema Web GIS - visualiza\u00e7\u00e3o do resultado final; Documenta\u00e7\u00e3o \u00b6 Documentos relacionados \u00e0s disciplinas participantes do projeto integrador da Fatec organizadas por sprints e datas. Sprint 1 (2020 - 03 - 20) Disciplina Entrega de Documentos Gest\u00e3o de Projetos Termo de Abertura de Projeto Gest\u00e3o de Projetos Diagrama de Tempo e Custo Gest\u00e3o de Projetos Declara\u00e7\u00e3o de escopo Gest\u00e3o e Governan\u00e7a de Tecnologia da Informa\u00e7\u00e3o Design Thinking Empreendedorismo Canvas","title":"Home"},{"location":"#projeto-integrador-ads-fatec","text":"Projeto Integrador ADS Fatec - S\u00e3o Jos\u00e9 dos Campos proposto pela empresa Visiona para a identifica\u00e7\u00e3o de talh\u00f5es (unidade m\u00ednima de cultivo de uma propriedade com caracter\u00edsticas em comum). Link Oficial para o projeto Github .","title":"Projeto Integrador ADS Fatec"},{"location":"#integrantes-do-grupo","text":"T\u00e1bata Gl\u00f3ria (Scrum Master - SM) Jo\u00e2o de Freitas (Project Owner - PO) Guilherme Gomes (Back end Developer - DEV) Jo\u00e3o Arruda (Front end Developer - DEV) Abner Ern\u00e2ni dos Anjos (Full Stack Developer - DEV)","title":"Integrantes do Grupo"},{"location":"#solucao","text":"Desenvolver um Sistema inteligente para a identifica\u00e7\u00e3o autom\u00e1tica de Talh\u00f5es com uso de Intelig\u00eancia Artificial e processos de classifica\u00e7\u00e3o de imagens e com um projeto Web Gis - Sistema de informa\u00e7\u00e3o Geogr\u00e1fico - contendo uma interface gr\u00e1fica agrad\u00e1vel ao usu\u00e1rio e de f\u00e1cil utiliza\u00e7\u00e3o e intuitiva, com uma \u00e1rea de visualiza\u00e7\u00e3o de imagens do mapa, conforme a regi\u00e3o e o per\u00edodo de tempo selecionados pelo usu\u00e1rio, permitindo a manipula\u00e7\u00e3o da imagem (aumentar ou diminuir e demarca\u00e7\u00e3o) e permitir o download desse arquivo para armazenamento.","title":"Solu\u00e7\u00e3o"},{"location":"#implementacao","text":"Como implementar? Tecnologias. Plataformas. Ferramentas. Para a implementa\u00e7\u00e3o ser\u00e1 necess\u00e1rio a utiliza\u00e7\u00e3o das seguintes tecnologias: Landsat-8 API: sat\u00e9lite de observa\u00e7\u00e3o da Terra, esses dados das imagens podem ser usados facilmente com qualquer software que reconhe\u00e7a arquivos GeoTIFF atrav\u00e9s de um arquivo CSV de \u00edndice dos dados do Landsat. Sentinel-2 API: constela\u00e7\u00e3o de dois sat\u00e9lites de observa\u00e7\u00e3o da Terra SEUS Os dados s\u00e3o ideais para aplicativos de agricultura, silvicultura e outros tipos de administra\u00e7\u00e3o de terra. esse conjunto de dados est\u00e1 dispon\u00edvel gratuitamente no programa Google Public Cloud Data. Geo Server: servidor de c\u00f3digo aberto escrito em Java que permite aos usu\u00e1rios compartilhar, processar e editar dados geoespaciais. Projetado para interoperabilidade, publica dados de qualquer fonte de dados espaciais importantes usando padr\u00f5es abertos. PostgreSQL: sistema de gerenciamento de banco de dados objeto-relacional (SGBDOR) baseado no POSTGRES Vers\u00e3o 4.2. Spring Boot: facilitar o processo de configura\u00e7\u00e3o e publica\u00e7\u00e3o de aplica\u00e7\u00f5es. Pode-se escolher os m\u00f3dulos que precisa atrav\u00e9s dos starters que inclui no pom.xml do projeto. Basicamente, s\u00e3o depend\u00eancias que agrupam outras depend\u00eancias. Angular: estrutura de design de aplicativo e plataforma de desenvolvimento para criar aplicativos de p\u00e1gina \u00fanica eficientes e sofisticados. Java: linguagem de programa\u00e7\u00e3o orientada a objetos que \u00e9 amplamente usada para o desenvolvimento de sites e aplicativos. Permite o desenvolvimento de programas multiplataforma, que podem ser executados em qualquer dispositivo. Python: linguagem de programa\u00e7\u00e3o de alto n\u00edvel, interpretada, de script, imperativa, orientada a objetos, funcional, de tipagem din\u00e2mica e forte, para a implementa\u00e7\u00e3o da inteligencia artificial. Conda Environment: gerenciador de ambientes virtuais para a linguagem python. Mkdocs: gerador de documenta\u00e7\u00e3o baseado na linguagem python. Github: Sistema de controle de vers\u00e3o distribuido e gerenciamento de c\u00f3digo-fonte, fornece controle de acesso e v\u00e1rios recursos de colabora\u00e7\u00e3o, como rastreamento de erros, solicita\u00e7\u00f5es de recursos, gerenciamento de tarefas e wikis para cada projeto. Microsoft TEAM: Trata-se de um aplicativo de bate-papo em grupo que permite o gerenciamento de diversas conversas em um \u00fanico ambiente de controle. Foi desenvolvido para facilitar a comunica\u00e7\u00e3o e promover a colabora\u00e7\u00e3o entre as equipes da empresa/projeto.","title":"Implementa\u00e7\u00e3o"},{"location":"#componentes","text":"Sistema Inteligente - constru\u00e7\u00e3o da base de dados a ser consumida; API - interm\u00e9dio para a base de dados e o sistema Web GIS; Sistema Web GIS - visualiza\u00e7\u00e3o do resultado final;","title":"Componentes"},{"location":"#documentacao","text":"Documentos relacionados \u00e0s disciplinas participantes do projeto integrador da Fatec organizadas por sprints e datas. Sprint 1 (2020 - 03 - 20) Disciplina Entrega de Documentos Gest\u00e3o de Projetos Termo de Abertura de Projeto Gest\u00e3o de Projetos Diagrama de Tempo e Custo Gest\u00e3o de Projetos Declara\u00e7\u00e3o de escopo Gest\u00e3o e Governan\u00e7a de Tecnologia da Informa\u00e7\u00e3o Design Thinking Empreendedorismo Canvas","title":"Documenta\u00e7\u00e3o"},{"location":"api-restful/","text":"API Spring Boot RESTful \u00b6 Projeto Integrador entre o sexto per\u00edodo da Faculdade de Tecnologia de S\u00e3o Jos\u00e9 dos Campos, Professor Jessen Vidal de An\u00e1lise e Desenvolvimento de Sistemas e a empresa Visiona , para qual nos forneceu o problema da identifica\u00e7\u00e3o de talh\u00f5es em imagens de sensoriamento remoto. Para o funcionamento da API Spring Boot com o cat\u00e1logo de imagens, \u00e9 necess\u00e1rio os seguintes requisitos: Uma inst\u00e2ncia do banco de dados PostgreSQL/PostGIS em execu\u00e7\u00e3o e configurado; Um servidor de mapas Geoserver em execu\u00e7\u00e3o e configurado; Projeto \u00b6 Este projeto consiste em: Desenvolvimento de uma API RESTful para o cat\u00e1logo de imagens georreferenciados em um banco de dados PostGIS; Com dados multitemporais, utilizar-se de intelig\u00eancia artificial para identificar talh\u00f5es em uma \u00e1rea de interesse. Ferramentas \u00b6 CI \u00c9 necess\u00e1rio uma m\u00e1quina virtual, esta servir\u00e1 para o software Jenkins que executar\u00e1 os processos de Integra\u00e7\u00e3o Cont\u00ednua. Se a m\u00e1quina for local, utilize o ngrok, um servi\u00e7o gratuito de tunelamento sem configura\u00e7\u00e3o de firewall ou port forwarding. Agora no Jenkins deve-se configurar a pipeline de testes nos seguintes passos: Clone : Para buscar o reposit\u00f3rio com os novos dados; Environment : Instala as depend\u00eancias do projeto; Configuar Webhook no GitHUB para o endpoint do Jenkins ( URL do ngrok se foi utilizado ) e ativar a op\u00e7\u00e3o: * GitHub hook trigger for GITScm polling CD a definir processo de deploy. Instala\u00e7\u00e3o e execu\u00e7\u00e3o da aplica\u00e7\u00e3o \u00b6 Instala\u00e7\u00e3o para o ambiente de desenvolvimento \u00b6 Obs.: Necess\u00e1rio instala\u00e7\u00e3o do gradle 5+ . $ gradle bootRun Execu\u00e7\u00e3o da aplica\u00e7\u00e3o em micro servi\u00e7os \u00b6 Obs.: N\u00e3o esque\u00e7a de mudar o endere\u00e7o IP (localhost) do banco de dados no arquivo application.properties para o endere\u00e7o real do servidor PostgreSQL do seu computador. ## Gerar o arquivo execut\u00e1vel `.jar` utilizando o Gradle 5+ $ gradle build ## Construir a imagem docker com base no `Dockerfile` $ docker build -t spring-restful . ## Executar o container localmente $ docker run --name spring-api-restful -p 4040:8080 -d spring-restful Ap\u00f3s o comando docker run digite o seguinte docker ps para listar os servi\u00e7os em execu\u00e7\u00e3o pelo seu docker instalado, a resposta deve ser a seguinte: $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a06cb1ccf107 spring-restful \"java -jar /app.jar\" 25 hours ago Up 25 hours 0 .0.0.0:4040->8080/tcp spring-api-restful Em seu navegador digite o seguinte link localhost:8080/cache/list e ver\u00e1 a seguinte resposta: [ { \"id\" : 16324 , \"name\" : \"clip_20170612T083546_Sigma0_VH_db.tif\" , \"description\" : \"clip_20170612T083546_Sigma0_VH Sentinel 1\" , \"band\" : \"band VH polarization effect\" , \"link\" : \"http://www.dpi.inpe.br/agricultural-database/lem/dados/cenas/Sentinel1/20170612_S1A/clip_20170612T083546_Sigma0_VH_db.tif\" }, ... ] Refer\u00eancias \u00b6 Visiona ; Jenkins ; ngrok ;","title":"About"},{"location":"api-restful/#api-spring-boot-restful","text":"Projeto Integrador entre o sexto per\u00edodo da Faculdade de Tecnologia de S\u00e3o Jos\u00e9 dos Campos, Professor Jessen Vidal de An\u00e1lise e Desenvolvimento de Sistemas e a empresa Visiona , para qual nos forneceu o problema da identifica\u00e7\u00e3o de talh\u00f5es em imagens de sensoriamento remoto. Para o funcionamento da API Spring Boot com o cat\u00e1logo de imagens, \u00e9 necess\u00e1rio os seguintes requisitos: Uma inst\u00e2ncia do banco de dados PostgreSQL/PostGIS em execu\u00e7\u00e3o e configurado; Um servidor de mapas Geoserver em execu\u00e7\u00e3o e configurado;","title":"API Spring Boot RESTful"},{"location":"api-restful/#projeto","text":"Este projeto consiste em: Desenvolvimento de uma API RESTful para o cat\u00e1logo de imagens georreferenciados em um banco de dados PostGIS; Com dados multitemporais, utilizar-se de intelig\u00eancia artificial para identificar talh\u00f5es em uma \u00e1rea de interesse.","title":"Projeto"},{"location":"api-restful/#ferramentas","text":"CI \u00c9 necess\u00e1rio uma m\u00e1quina virtual, esta servir\u00e1 para o software Jenkins que executar\u00e1 os processos de Integra\u00e7\u00e3o Cont\u00ednua. Se a m\u00e1quina for local, utilize o ngrok, um servi\u00e7o gratuito de tunelamento sem configura\u00e7\u00e3o de firewall ou port forwarding. Agora no Jenkins deve-se configurar a pipeline de testes nos seguintes passos: Clone : Para buscar o reposit\u00f3rio com os novos dados; Environment : Instala as depend\u00eancias do projeto; Configuar Webhook no GitHUB para o endpoint do Jenkins ( URL do ngrok se foi utilizado ) e ativar a op\u00e7\u00e3o: * GitHub hook trigger for GITScm polling CD a definir processo de deploy.","title":"Ferramentas"},{"location":"api-restful/#instalacao-e-execucao-da-aplicacao","text":"","title":"Instala\u00e7\u00e3o e execu\u00e7\u00e3o da aplica\u00e7\u00e3o"},{"location":"api-restful/#instalacao-para-o-ambiente-de-desenvolvimento","text":"Obs.: Necess\u00e1rio instala\u00e7\u00e3o do gradle 5+ . $ gradle bootRun","title":"Instala\u00e7\u00e3o para o ambiente de desenvolvimento"},{"location":"api-restful/#execucao-da-aplicacao-em-micro-servicos","text":"Obs.: N\u00e3o esque\u00e7a de mudar o endere\u00e7o IP (localhost) do banco de dados no arquivo application.properties para o endere\u00e7o real do servidor PostgreSQL do seu computador. ## Gerar o arquivo execut\u00e1vel `.jar` utilizando o Gradle 5+ $ gradle build ## Construir a imagem docker com base no `Dockerfile` $ docker build -t spring-restful . ## Executar o container localmente $ docker run --name spring-api-restful -p 4040:8080 -d spring-restful Ap\u00f3s o comando docker run digite o seguinte docker ps para listar os servi\u00e7os em execu\u00e7\u00e3o pelo seu docker instalado, a resposta deve ser a seguinte: $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a06cb1ccf107 spring-restful \"java -jar /app.jar\" 25 hours ago Up 25 hours 0 .0.0.0:4040->8080/tcp spring-api-restful Em seu navegador digite o seguinte link localhost:8080/cache/list e ver\u00e1 a seguinte resposta: [ { \"id\" : 16324 , \"name\" : \"clip_20170612T083546_Sigma0_VH_db.tif\" , \"description\" : \"clip_20170612T083546_Sigma0_VH Sentinel 1\" , \"band\" : \"band VH polarization effect\" , \"link\" : \"http://www.dpi.inpe.br/agricultural-database/lem/dados/cenas/Sentinel1/20170612_S1A/clip_20170612T083546_Sigma0_VH_db.tif\" }, ... ]","title":"Execu\u00e7\u00e3o da aplica\u00e7\u00e3o em micro servi\u00e7os"},{"location":"api-restful/#referencias","text":"Visiona ; Jenkins ; ngrok ;","title":"Refer\u00eancias"},{"location":"api-restful/bd/","text":"API Spring Boot PostgreSQL \u00b6 Scripts em PSQL para criar as tabelas de fei\u00e7\u00f5es para as buscas de \u00e1reas de interesse para o Sistema Web de visualiza\u00e7\u00e3o com migra\u00e7\u00e3o de dados para um banco PostgreSQL e executar em um container docker. Assim como a configura\u00e7\u00e3o do ambiente de desenvolvimento utilizando o gerenciador de container Docker com amplo uso da extens\u00e3o Postgis para o processamento de opera\u00e7\u00f5es geogr\u00e1ficas. Cria\u00e7\u00e3o do container docker PostgreSQL \u00b6 ## Download do reposit\u00f3rio oficial $ docker pull mdillon/postgis ## Execu\u00e7\u00e3o do container com uma inst\u00e2ncia do Postgresql $ docker run --name postgresql -p 5480:5432 -e POSTGRES_PASSWORD=postgres -d mdillon/postgis Cria\u00e7\u00e3o do container docker PGAdmin4 (Interface Gr\u00e1fica) \u00b6 ## Download do reposit\u00f3rio oficial $ docker pull dpage/pgadmin4 ## Execu\u00e7\u00e3o do container com uma inst\u00e2ncia do PGAdmin $ docker run --name pgadmin4 -p 16543:80 -e PGADMIN_DEFAULT_EMAIL,PGADMIN_DEFAULT_PASSWORD=abner.anjos@fatec.sp.gov.br,postgres -d dpage/pgadmin4 Cria\u00e7\u00e3o do container docker PostgreSQL e PGAdmin4 (Interface Gr\u00e1fica) por default com o Docker Compose \u00b6 $ docker compose up -d postgresql pgadmin4 Obs.: N\u00e3o esque\u00e7a de cadastrar o servidor de banco de dados PostgreSQL para o uso da interface gr\u00e1fica PGAdmin4 com as credenciais necess\u00e1rias Ambiente PSQL \u00b6 ## Instala\u00e7\u00e3o do ambiente psql CLI interface da linha de comando $ sudo apt install postgresql Migra\u00e7\u00e3o dos dados \u00b6 ## Cria\u00e7\u00e3o do banco de dados para a migra\u00e7\u00e3o $ createdb -h 0.0.0.0 -p 5480 -U postgres shapes \"Camada de fei\u00e7\u00f5es para a defini\u00e7\u00e3o de talh\u00f5es\" ## Alterando as permiss\u00f5es (exemplo) $ sudo chmod 777 -R ../db ## Cria\u00e7\u00e3o do usuario Postgres para a API e migra\u00e7\u00e3o dos dados em csv $ psql -h 0.0.0.0 -p 5480 -U postgres -d shapes -f create-tables.sql Ap\u00f3s a instala\u00e7\u00e3o do ambiente de desenvolvimento em seu navegador acesse o pgAdmin4 com o endere\u00e7o 16543 . Obs.: Colocar as credenciais do arquivo docker-compose.yml configuradas acima.","title":"Data Base"},{"location":"api-restful/bd/#api-spring-boot-postgresql","text":"Scripts em PSQL para criar as tabelas de fei\u00e7\u00f5es para as buscas de \u00e1reas de interesse para o Sistema Web de visualiza\u00e7\u00e3o com migra\u00e7\u00e3o de dados para um banco PostgreSQL e executar em um container docker. Assim como a configura\u00e7\u00e3o do ambiente de desenvolvimento utilizando o gerenciador de container Docker com amplo uso da extens\u00e3o Postgis para o processamento de opera\u00e7\u00f5es geogr\u00e1ficas.","title":"API Spring Boot PostgreSQL"},{"location":"api-restful/bd/#criacao-do-container-docker-postgresql","text":"## Download do reposit\u00f3rio oficial $ docker pull mdillon/postgis ## Execu\u00e7\u00e3o do container com uma inst\u00e2ncia do Postgresql $ docker run --name postgresql -p 5480:5432 -e POSTGRES_PASSWORD=postgres -d mdillon/postgis","title":"Cria\u00e7\u00e3o do container docker PostgreSQL"},{"location":"api-restful/bd/#criacao-do-container-docker-pgadmin4-interface-grafica","text":"## Download do reposit\u00f3rio oficial $ docker pull dpage/pgadmin4 ## Execu\u00e7\u00e3o do container com uma inst\u00e2ncia do PGAdmin $ docker run --name pgadmin4 -p 16543:80 -e PGADMIN_DEFAULT_EMAIL,PGADMIN_DEFAULT_PASSWORD=abner.anjos@fatec.sp.gov.br,postgres -d dpage/pgadmin4","title":"Cria\u00e7\u00e3o do container docker PGAdmin4 (Interface Gr\u00e1fica)"},{"location":"api-restful/bd/#criacao-do-container-docker-postgresql-e-pgadmin4-interface-grafica-por-default-com-o-docker-compose","text":"$ docker compose up -d postgresql pgadmin4 Obs.: N\u00e3o esque\u00e7a de cadastrar o servidor de banco de dados PostgreSQL para o uso da interface gr\u00e1fica PGAdmin4 com as credenciais necess\u00e1rias","title":"Cria\u00e7\u00e3o do container docker PostgreSQL e PGAdmin4 (Interface Gr\u00e1fica) por default com o Docker Compose"},{"location":"api-restful/bd/#ambiente-psql","text":"## Instala\u00e7\u00e3o do ambiente psql CLI interface da linha de comando $ sudo apt install postgresql","title":"Ambiente PSQL"},{"location":"api-restful/bd/#migracao-dos-dados","text":"## Cria\u00e7\u00e3o do banco de dados para a migra\u00e7\u00e3o $ createdb -h 0.0.0.0 -p 5480 -U postgres shapes \"Camada de fei\u00e7\u00f5es para a defini\u00e7\u00e3o de talh\u00f5es\" ## Alterando as permiss\u00f5es (exemplo) $ sudo chmod 777 -R ../db ## Cria\u00e7\u00e3o do usuario Postgres para a API e migra\u00e7\u00e3o dos dados em csv $ psql -h 0.0.0.0 -p 5480 -U postgres -d shapes -f create-tables.sql Ap\u00f3s a instala\u00e7\u00e3o do ambiente de desenvolvimento em seu navegador acesse o pgAdmin4 com o endere\u00e7o 16543 . Obs.: Colocar as credenciais do arquivo docker-compose.yml configuradas acima.","title":"Migra\u00e7\u00e3o dos dados"},{"location":"api-restful/geoserver/","text":"Configura\u00e7\u00e3o inicial do Servidor de mapas Geoserver \u00b6 Configura\u00e7\u00e3o inicial do servidor de mapas geoserver para a postagem de camadas a serem consumidas pelo Sistema Web de visualiza\u00e7\u00e3o e identifica\u00e7\u00e3o de Talh\u00f5es proposto pelo projeto integrador Aqui neste arquivo a prioridade e a estrutura de microsservi\u00e7os, portanto vamos priorizar a instala\u00e7\u00e3o por meio da ferramenta de gerenciamento de container Docker. Montagem do ambiente de desenvolvimento \u00b6 ## Download da imagem $ docker pull kartoza/geoserver ## execu\u00e7\u00e3o do container Docker $ docker run -d -p 8686:8080 --name geoserver -e STABLE_EXTENSIONS=charts-plugin,db2-plugin kartoza/geoserver Postagem das camadas \u00b6 ## Camadas necess\u00e1rias para a execu\u00e7\u00e3o TODO Verificar se o sistema encontra em execu\u00e7\u00e3o no endere\u00e7o localhost:8686/geoserver e a p\u00e1gina de administra\u00e7\u00e3o do geoserver dever\u00e1 ser exibida. A credencial padr\u00e3o do GeoServer \u00e9 a seguinte: - Usu\u00e1rio: admin - Senha: geoserver","title":"Geoserver"},{"location":"api-restful/geoserver/#configuracao-inicial-do-servidor-de-mapas-geoserver","text":"Configura\u00e7\u00e3o inicial do servidor de mapas geoserver para a postagem de camadas a serem consumidas pelo Sistema Web de visualiza\u00e7\u00e3o e identifica\u00e7\u00e3o de Talh\u00f5es proposto pelo projeto integrador Aqui neste arquivo a prioridade e a estrutura de microsservi\u00e7os, portanto vamos priorizar a instala\u00e7\u00e3o por meio da ferramenta de gerenciamento de container Docker.","title":"Configura\u00e7\u00e3o inicial do Servidor de mapas Geoserver"},{"location":"api-restful/geoserver/#montagem-do-ambiente-de-desenvolvimento","text":"## Download da imagem $ docker pull kartoza/geoserver ## execu\u00e7\u00e3o do container Docker $ docker run -d -p 8686:8080 --name geoserver -e STABLE_EXTENSIONS=charts-plugin,db2-plugin kartoza/geoserver","title":"Montagem do ambiente de desenvolvimento"},{"location":"api-restful/geoserver/#postagem-das-camadas","text":"## Camadas necess\u00e1rias para a execu\u00e7\u00e3o TODO Verificar se o sistema encontra em execu\u00e7\u00e3o no endere\u00e7o localhost:8686/geoserver e a p\u00e1gina de administra\u00e7\u00e3o do geoserver dever\u00e1 ser exibida. A credencial padr\u00e3o do GeoServer \u00e9 a seguinte: - Usu\u00e1rio: admin - Senha: geoserver","title":"Postagem das camadas"},{"location":"python-cnn/","text":"Python Convolutional Neural Networks \u00b6 O sistema deve reconhecer \u00e1reas de talh\u00f5es (unidade m\u00ednima de cultivo de uma propriedade) em um mapa, utilizando dados multitemporais ( TensorFlow Classificador de imagens ), atrav\u00e9s de intelig\u00eancia artificial, a interface gr\u00e1fica (Web GIS), deve permitir ao usu\u00e1rio selecionar um intervalo de tempo e as imagens de um cat\u00e1logo dispon\u00edvel para a regi\u00e3o selecionada, carregando-as em bloco para n\u00e3o sobrecarregar o sistema e ter op\u00e7\u00e3o para download. Web GIS (Web Geographic Information System): Portal de um \u201cSistema de Informa\u00e7\u00e3o Geogr\u00e1fica\u201d (SIG), baseado em padr\u00e3o de servi\u00e7os web OGC, fornecendo uma estrutura para visualiza\u00e7\u00e3o e navega\u00e7\u00e3o de mapas (basemaps) e de dados geogr\u00e1ficos vetoriais e matriciais. Cat\u00e1logo de Imagem: O Cat\u00e1logo de Imagem deve possibilitar a cataloga\u00e7\u00e3o de cole\u00e7\u00f5es de dados espa\u00e7o-temporal, (metadados) dos sat\u00e9lites Landsat 8 e Sentinel-2. Obs: O cat\u00e1logo de imagem tamb\u00e9m dever\u00e1 fornecer interface (web API) que permitir\u00e1 consultar e recuperar as cenas de sat\u00e9lite catalogadas. Esta interface possibilitar\u00e1 que o Web GIS realize pesquisas complexas, filtrando diferentes par\u00e2metros e especificando crit\u00e9rios geogr\u00e1ficos. Map Tile Engine: Esse componente deve produzir \u201cmap raster tile\u201d para uma determinada cena de sat\u00e9lite, obedecendo ao padr\u00e3o OGC WMTS. Permitindo que usu\u00e1rios do Web GIS visualizem e naveguem pelas imagens sem precisar baix\u00e1-las (real time streaming). Cada map tile \u00e9 uma representa\u00e7\u00e3o visual de parte da imagem, n\u00e3o dos dados em si. Esses tiles geralmente s\u00e3o renderizados em formato pict\u00f3rico (PNG ou JPEG) que podem ser exibidos em uma aplica\u00e7\u00e3o web. Download: Ap\u00f3s a consulta \u00e0s imagens de uma determinada \u00e1rea de interesse, o sistema permite o download de todas as cenas (com todas as suas bandas) do per\u00edodo selecionado pelo usu\u00e1rio (Pilha de imagem). M\u00e1scara (Mask): Neste m\u00f3dulo, o sistema gerar\u00e1 uma m\u00e1scara bin\u00e1ria com as regi\u00f5es de interesse (AOI\u2019s) para cada cena selecionada. A constru\u00e7\u00e3o das m\u00e1scaras de sa\u00edda das \u00e1reas de interesse, se d\u00e3o apresentando valor igual a um (1) dentro desse poligono, enquanto as demais \u00e1reas (\u00e1reas n\u00e3o selecionadas) apresentam valor igual a zero (0). Arquivo: Ap\u00f3s a gera\u00e7\u00e3o da m\u00e1scara para cada cena (scene), \u00e9 preciso armazen\u00e1-la tanto para valida\u00e7\u00e3o visual quanto para download. Com isso, nesse m\u00f3dulo a m\u00e1scara deve ser armazenada de alguma forma que possibilite ao usu\u00e1rio fazer sua valida\u00e7\u00e3o visual (pr\u00f3xima etapa), assim como o download para treinamento de modelos de intelig\u00eancia artificial. Funcionamento das redes neurais convolucionais para o processamento das imagens. Obs.: Instala\u00e7\u00e3o do Miniconda \u00e9 necess\u00e1ria para a execu\u00e7\u00e3o dos comandos a seguir. Ambiente de Desenvolvimento \u00b6 # Crie um novo ambiente conda com Python3+ $ conda create --name python-cnn python=3.6.9 # Ativar o ambiente $ conda activate python-cnn # Com o ambiente ativado instalar o ipykernel (python-cnn) $ conda install notebook ipykernel # Com o ipykernel criar um kernel com o python 3.5 autom\u00e1tico (python-cnn) $ ipython kernel install --user --name python-cnn # Instalar o servidor Jupyter Lab (python-cnn) $ python -m pip install jupyter # Instalar a biblioteca gdal e basemap para processar as imagens (python-cnn) $ conda install -c conda-forge gdal=2.4.4 # Executar o servidor em modo de desenvolvimento (python-cnn) $ jupyter notebook Obs.: Pode ser que o Notebook n\u00e3o reconhe\u00e7a o kernel instalado pelo conda, sendo assim voc\u00ea pode alterar manualmente kernel >> Change Kernel >> python-cnn . Ambiente de micro servi\u00e7os em docker \u00b6 TODO C\u00f3digo fonte \u00b6 Tamb\u00e9m ser\u00e1 necess\u00e1rio acesso ao servidor FTP . Para a execu\u00e7\u00e3o do c\u00f3digo fonte abaixo \u00e9 necess\u00e1rio o download da pasta data/ , ap\u00f3s o download descompacte na pasta root do projeto. data/ |_ input/ |_ train/ |_ validation/ |_ output/ # !pip install tensorflow matplotlib pillow wget import tensorflow as tf from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense , Conv2D , Flatten , Dropout , MaxPooling2D from tensorflow.keras.preprocessing.image import ImageDataGenerator import numpy as np import matplotlib.pyplot as plt from services.georasters import Georaster as gr # clip_20170612T083546_Sigma0_VH_db # getGeoRaster(self, date, band, file=False, download=True, convert=True): data = gr ( '/home/abner' ) . getGeoRaster ( '2017-06-12 08h:35m:46s' , 'vh' , file = False , download = True , convert = True ) data . get ( \"image/jpg\" ) data . get ( \"georaster\" ) . GetProjection () 'PROJCS[\"WGS 84 / UTM zone 23S\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-45],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",10000000],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32723\"]]' data . get ( \"georaster\" ) . GetMetadata () {'AREA_OR_POINT': 'Area'} band = data . get ( \"georaster\" ) . GetRasterBand ( 1 ) band <osgeo.gdal.Band; proxy of <Swig Object of type 'GDALRasterBandShadow *' at 0x7f120b5ad540> >","title":"Sistema Inteligente"},{"location":"python-cnn/#python-convolutional-neural-networks","text":"O sistema deve reconhecer \u00e1reas de talh\u00f5es (unidade m\u00ednima de cultivo de uma propriedade) em um mapa, utilizando dados multitemporais ( TensorFlow Classificador de imagens ), atrav\u00e9s de intelig\u00eancia artificial, a interface gr\u00e1fica (Web GIS), deve permitir ao usu\u00e1rio selecionar um intervalo de tempo e as imagens de um cat\u00e1logo dispon\u00edvel para a regi\u00e3o selecionada, carregando-as em bloco para n\u00e3o sobrecarregar o sistema e ter op\u00e7\u00e3o para download. Web GIS (Web Geographic Information System): Portal de um \u201cSistema de Informa\u00e7\u00e3o Geogr\u00e1fica\u201d (SIG), baseado em padr\u00e3o de servi\u00e7os web OGC, fornecendo uma estrutura para visualiza\u00e7\u00e3o e navega\u00e7\u00e3o de mapas (basemaps) e de dados geogr\u00e1ficos vetoriais e matriciais. Cat\u00e1logo de Imagem: O Cat\u00e1logo de Imagem deve possibilitar a cataloga\u00e7\u00e3o de cole\u00e7\u00f5es de dados espa\u00e7o-temporal, (metadados) dos sat\u00e9lites Landsat 8 e Sentinel-2. Obs: O cat\u00e1logo de imagem tamb\u00e9m dever\u00e1 fornecer interface (web API) que permitir\u00e1 consultar e recuperar as cenas de sat\u00e9lite catalogadas. Esta interface possibilitar\u00e1 que o Web GIS realize pesquisas complexas, filtrando diferentes par\u00e2metros e especificando crit\u00e9rios geogr\u00e1ficos. Map Tile Engine: Esse componente deve produzir \u201cmap raster tile\u201d para uma determinada cena de sat\u00e9lite, obedecendo ao padr\u00e3o OGC WMTS. Permitindo que usu\u00e1rios do Web GIS visualizem e naveguem pelas imagens sem precisar baix\u00e1-las (real time streaming). Cada map tile \u00e9 uma representa\u00e7\u00e3o visual de parte da imagem, n\u00e3o dos dados em si. Esses tiles geralmente s\u00e3o renderizados em formato pict\u00f3rico (PNG ou JPEG) que podem ser exibidos em uma aplica\u00e7\u00e3o web. Download: Ap\u00f3s a consulta \u00e0s imagens de uma determinada \u00e1rea de interesse, o sistema permite o download de todas as cenas (com todas as suas bandas) do per\u00edodo selecionado pelo usu\u00e1rio (Pilha de imagem). M\u00e1scara (Mask): Neste m\u00f3dulo, o sistema gerar\u00e1 uma m\u00e1scara bin\u00e1ria com as regi\u00f5es de interesse (AOI\u2019s) para cada cena selecionada. A constru\u00e7\u00e3o das m\u00e1scaras de sa\u00edda das \u00e1reas de interesse, se d\u00e3o apresentando valor igual a um (1) dentro desse poligono, enquanto as demais \u00e1reas (\u00e1reas n\u00e3o selecionadas) apresentam valor igual a zero (0). Arquivo: Ap\u00f3s a gera\u00e7\u00e3o da m\u00e1scara para cada cena (scene), \u00e9 preciso armazen\u00e1-la tanto para valida\u00e7\u00e3o visual quanto para download. Com isso, nesse m\u00f3dulo a m\u00e1scara deve ser armazenada de alguma forma que possibilite ao usu\u00e1rio fazer sua valida\u00e7\u00e3o visual (pr\u00f3xima etapa), assim como o download para treinamento de modelos de intelig\u00eancia artificial. Funcionamento das redes neurais convolucionais para o processamento das imagens. Obs.: Instala\u00e7\u00e3o do Miniconda \u00e9 necess\u00e1ria para a execu\u00e7\u00e3o dos comandos a seguir.","title":"Python Convolutional Neural Networks"},{"location":"python-cnn/#ambiente-de-desenvolvimento","text":"# Crie um novo ambiente conda com Python3+ $ conda create --name python-cnn python=3.6.9 # Ativar o ambiente $ conda activate python-cnn # Com o ambiente ativado instalar o ipykernel (python-cnn) $ conda install notebook ipykernel # Com o ipykernel criar um kernel com o python 3.5 autom\u00e1tico (python-cnn) $ ipython kernel install --user --name python-cnn # Instalar o servidor Jupyter Lab (python-cnn) $ python -m pip install jupyter # Instalar a biblioteca gdal e basemap para processar as imagens (python-cnn) $ conda install -c conda-forge gdal=2.4.4 # Executar o servidor em modo de desenvolvimento (python-cnn) $ jupyter notebook Obs.: Pode ser que o Notebook n\u00e3o reconhe\u00e7a o kernel instalado pelo conda, sendo assim voc\u00ea pode alterar manualmente kernel >> Change Kernel >> python-cnn .","title":"Ambiente de Desenvolvimento"},{"location":"python-cnn/#ambiente-de-micro-servicos-em-docker","text":"TODO","title":"Ambiente de micro servi\u00e7os em docker"},{"location":"python-cnn/#codigo-fonte","text":"Tamb\u00e9m ser\u00e1 necess\u00e1rio acesso ao servidor FTP . Para a execu\u00e7\u00e3o do c\u00f3digo fonte abaixo \u00e9 necess\u00e1rio o download da pasta data/ , ap\u00f3s o download descompacte na pasta root do projeto. data/ |_ input/ |_ train/ |_ validation/ |_ output/ # !pip install tensorflow matplotlib pillow wget import tensorflow as tf from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense , Conv2D , Flatten , Dropout , MaxPooling2D from tensorflow.keras.preprocessing.image import ImageDataGenerator import numpy as np import matplotlib.pyplot as plt from services.georasters import Georaster as gr # clip_20170612T083546_Sigma0_VH_db # getGeoRaster(self, date, band, file=False, download=True, convert=True): data = gr ( '/home/abner' ) . getGeoRaster ( '2017-06-12 08h:35m:46s' , 'vh' , file = False , download = True , convert = True ) data . get ( \"image/jpg\" ) data . get ( \"georaster\" ) . GetProjection () 'PROJCS[\"WGS 84 / UTM zone 23S\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-45],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",10000000],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32723\"]]' data . get ( \"georaster\" ) . GetMetadata () {'AREA_OR_POINT': 'Area'} band = data . get ( \"georaster\" ) . GetRasterBand ( 1 ) band <osgeo.gdal.Band; proxy of <Swig Object of type 'GDALRasterBandShadow *' at 0x7f120b5ad540> >","title":"C\u00f3digo fonte"},{"location":"web-gis/","text":"Web GIS \u00b6 Sistema Web GIS para a visualiza\u00e7\u00e3o de talh\u00f5es com dados espa\u00e7o-temporais, permitindo o recorte e buscas de \u00e1reas de interesse por extensivo uso da biblioteca Openlayers . Para a execu\u00e7\u00e3o desta aplica\u00e7\u00e3o ao \u00e9 necess\u00e1rio ter o projeto API Restful em execu\u00e7\u00e3o utilizando Docker ou o ambiente de desenvolvimento. Execu\u00e7\u00e3o para o ambiente de micro servi\u00e7os em Docker \u00b6 Obs.: Necess\u00e1ria instala\u00e7\u00e3o do Node 10+ e Angular CLI 9+ , n\u00e3o esque\u00e7a de modificar o ip do servi\u00e7o de cache em app/services/cache-system.ts . ## Construir o pacote HTML para a execu\u00e7\u00e3o do http-server $ ng build ## Copie o arquivo Dockerfile para o pacote rec\u00e9m-gerado $ cp Dockerfile dist/web-gis && cd dist/web-gis Para a execu\u00e7\u00e3o do ambiente em docker execute os seguintes comandos: ## Crie uma imagem para a execu\u00e7\u00e3o do container $ docker build -t web-gis:latest . ## Fica a criterio do usuario criar um volume para armazenar os dados $ docker container run --name app-smh-ui -p 8082:8080 -d web-gis:latest Abaixo se encontra a aplica\u00e7\u00e3o em funcionamento utilizando os passos anteriores: Este projeto foi gerado utilizando Angular CLI vers\u00e3o 9+. Servidor para o ambiente de desenvolvimento \u00b6 Executar o seguinte comando ng serve para executar um novo servidor de desenvolvimento. No navegador procure pelo endere\u00e7o http://localhost:4200/ . A aplica\u00e7\u00e3o ir\u00e1 realizar a leitura autom\u00e1tica de arquivos em conjunto com as altera\u00e7\u00f5es implementadas. Desenvolvimento de c\u00f3digo \u00b6 Executar o seguinte comando ng generate component component-name para gerar um novo componente em Linguagem TypeScript . Gerando pacotes HTML \u00b6 Execute o seguinte comando ng build para gerar o pacote HTML para a execu\u00e7\u00e3o. Use o comando --prod tag para o ambiente de produ\u00e7\u00e3o. Testes Unit\u00e1rios \u00b6 Execute ng test para executar os testes unit\u00e1rios via Karma . Executando testes end-to-end \u00b6 Execute ng e2e para executar o testes end-to-end via Protractor Ajuda FAQ \u00b6 Para maisinforma\u00e7\u00f5es sobre a usabilidade da interface de linha de comando use ng help ou d\u00ea uma olhada Angular CLI README .","title":"Web-GIS"},{"location":"web-gis/#web-gis","text":"Sistema Web GIS para a visualiza\u00e7\u00e3o de talh\u00f5es com dados espa\u00e7o-temporais, permitindo o recorte e buscas de \u00e1reas de interesse por extensivo uso da biblioteca Openlayers . Para a execu\u00e7\u00e3o desta aplica\u00e7\u00e3o ao \u00e9 necess\u00e1rio ter o projeto API Restful em execu\u00e7\u00e3o utilizando Docker ou o ambiente de desenvolvimento.","title":"Web GIS"},{"location":"web-gis/#execucao-para-o-ambiente-de-micro-servicos-em-docker","text":"Obs.: Necess\u00e1ria instala\u00e7\u00e3o do Node 10+ e Angular CLI 9+ , n\u00e3o esque\u00e7a de modificar o ip do servi\u00e7o de cache em app/services/cache-system.ts . ## Construir o pacote HTML para a execu\u00e7\u00e3o do http-server $ ng build ## Copie o arquivo Dockerfile para o pacote rec\u00e9m-gerado $ cp Dockerfile dist/web-gis && cd dist/web-gis Para a execu\u00e7\u00e3o do ambiente em docker execute os seguintes comandos: ## Crie uma imagem para a execu\u00e7\u00e3o do container $ docker build -t web-gis:latest . ## Fica a criterio do usuario criar um volume para armazenar os dados $ docker container run --name app-smh-ui -p 8082:8080 -d web-gis:latest Abaixo se encontra a aplica\u00e7\u00e3o em funcionamento utilizando os passos anteriores: Este projeto foi gerado utilizando Angular CLI vers\u00e3o 9+.","title":"Execu\u00e7\u00e3o para o ambiente de micro servi\u00e7os em Docker"},{"location":"web-gis/#servidor-para-o-ambiente-de-desenvolvimento","text":"Executar o seguinte comando ng serve para executar um novo servidor de desenvolvimento. No navegador procure pelo endere\u00e7o http://localhost:4200/ . A aplica\u00e7\u00e3o ir\u00e1 realizar a leitura autom\u00e1tica de arquivos em conjunto com as altera\u00e7\u00f5es implementadas.","title":"Servidor para o ambiente de desenvolvimento"},{"location":"web-gis/#desenvolvimento-de-codigo","text":"Executar o seguinte comando ng generate component component-name para gerar um novo componente em Linguagem TypeScript .","title":"Desenvolvimento de c\u00f3digo"},{"location":"web-gis/#gerando-pacotes-html","text":"Execute o seguinte comando ng build para gerar o pacote HTML para a execu\u00e7\u00e3o. Use o comando --prod tag para o ambiente de produ\u00e7\u00e3o.","title":"Gerando pacotes HTML"},{"location":"web-gis/#testes-unitarios","text":"Execute ng test para executar os testes unit\u00e1rios via Karma .","title":"Testes Unit\u00e1rios"},{"location":"web-gis/#executando-testes-end-to-end","text":"Execute ng e2e para executar o testes end-to-end via Protractor","title":"Executando testes end-to-end"},{"location":"web-gis/#ajuda-faq","text":"Para maisinforma\u00e7\u00f5es sobre a usabilidade da interface de linha de comando use ng help ou d\u00ea uma olhada Angular CLI README .","title":"Ajuda FAQ"}]}